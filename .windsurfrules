# Coding Rules and Guidelines

## Repository Structure and Organization
1. All application code must be placed in the `src` directory.
2. All data files must be stored in the `data` directory.
3. All tests must be written in the `tests` directory, maintaining a mirror structure to the `src` directory.
4. Follow a consistent naming convention for files and directories (snake_case for Python files, kebab-case for configuration files).
5. Maintain a clean project structure; avoid creating files outside of designated directories.

## Development Workflow
1. Always work on feature branches; never commit directly to the main branch.
2. The main branch is protected and requires PRs to be merged through the merge queue.
3. Before creating a new branch, verify your current branch and ensure it makes sense for the task at hand.
4. Break down larger tasks into smaller, manageable sub-tasks in the `@TASKS.md` file.
5. When discussing larger tasks, create detailed GitHub issues to track progress.
6. Update GitHub PRs and issues regularly as progress is made.
7. Always read all comments on PRs and issues as they may contain crucial information.

## Code Quality and Standards
1. Follow the DRY (Don't Repeat Yourself) principle in all code and documentation.
2. Use ruff for code linting and formatting; do not manually fix linting issues.
3. All Python code should adhere to PEP 8 standards as enforced by ruff.
4. Write clean, readable code with descriptive variable and function names.
5. Include docstrings for all functions, classes, and modules.
6. Avoid unnecessary complexity; prefer simple, straightforward solutions.
7. Follow Single Responsibility Principle (SRP) for functions and classes.

## Testing Requirements
1. Adopt a test-driven development approach whenever possible.
2. Use pytest for all testing needs.
3. Write tests for all new functionality and significant code changes.
4. Ensure tests cover both expected outcomes and edge cases.
5. Maintain a reasonable test coverage level (aim for >80%).
6. All tests must pass before submitting a PR.

## Dependency Management
1. Use uv from astral for Python package management.
2. Document all dependencies in the appropriate requirements files.
3. Minimize external dependencies; justify any new packages.
4. Pin dependency versions to ensure reproducible builds.

## Git and GitHub Practices
1. Use the GitHub CLI (gh) for GitHub operations; we are already authenticated.
2. Format commit messages as: `"type: description"` where type must be one of [add, update, remove, fix, meta, release].
3. Always double-check changes before committing, pushing, or creating PRs.
4. Create detailed PR descriptions that explain the changes and reference relevant issues.
5. Keep PRs focused on a single concern for easier review.
6. Request reviews from appropriate team members.

## Error Handling and Edge Cases
1. Implement robust error handling for all code that could fail.
2. Validate inputs and handle edge cases gracefully.
3. Log errors appropriately with context for debugging.
4. Consider failure scenarios for network requests, file I/O, and other external operations.

## Documentation
1. Keep documentation up-to-date with code changes.
2. Only update documentation after the associated code changes have been saved.
3. Document API endpoints, function parameters, and return values.
4. Include examples for complex or non-obvious functionality.

## Review Process
1. All code must be reviewed before merging.
2. Reviewers should check for adherence to these rules.
3. Address all review comments before requesting re-review.
4. Verify that all automated checks pass.

## Collaboration Etiquette
1. Be respectful of others in comments, code, and documentation.
2. Make content clear and understandable to others.
3. Acknowledge and credit others' contributions appropriately.
4. Maintain professional communication in all interactions.

## Verification Before Submission
1. Run all tests locally before submitting.
2. Verify that ruff shows no linting issues.
3. Run through a personal checklist of these rules before creating a PR.
4. Ensure all automated CI checks pass before requesting reviews.

Remember: We implement automation to make contributing smooth and easy, not to add complexity. The goal is maintainable, high-quality code through consistent processes.